ETSI 
The European Telecommunications Standards Institute (ETSI) is an independent, not-for-profit, standardization organization operating in the field of information and communications.[1] ETSI supports the development and testing of global technical standards for ICT-enabled systems, applications and services.

V2X 
Vehicle-to-everything (V2X) describes wireless communication between a vehicle and any entity that may affect, or may be affected by, the vehicle. Sometimes called C-V2X, it is a vehicular communication system that is intended to improve road safety and traffic efficiency while reducing pollution and saving energy.

X.509
In cryptography, X.509 is an International Telecommunication Union (ITU) standard defining the format of public key certificates.[1] X.509 certificates are used in many Internet protocols, including TLS/SSL, which is the basis for HTTPS,[2] the secure protocol for browsing the web. They are also used in offline applications, like electronic signatures.[3]

ITS-G5 
ITS-G5 is a European standard for ad-hoc short-range communication of vehicles among each other (V2V) and with Road ITS Stations (V2I). The ITS-G5 Access layer specification for Intelligent Transport Systems operating in the 5 GHz frequency band is given in ETSI EN 302 663. ITS-G5 is a profile of the amendment IEEE 802.11p, which has been incorporated into the main IEEE 802.11 standard, and an IEEE 802.2 LLC. It uses the 5.9 GHz frequency band to support safety- and non-safety ITS applications.

ABBREVIATIONS 
AA 	Authorization Authority 
AES 	Advanced Encryption Standard 
ASN 	Abstract Syntax Notation 
AT 	Authorization Ticket 
CA 	Certification Authority 
CCH 	Control CHannel 
CCM 	Counter with CBC-MAC 
CCMS 	Cooperative-ITS Certificate Management System 
COER 	Canonical Octet Encoding Rules 
CPOC 	C-ITS Point Of Contact 
CRL 	Certificate Revocation List 
CTL 	Certificate Trust List 
CVRIA 	Connected Vehicle Reference Implementation Architecture 
DC 	Distribution Centre 
DEN 	Decentralized Environmental Notification 
DENM 	Decentralized Environmental Notification Message 
EA 	Enrolment Authority 
EC 	Enrolment Credential 
ECC 	Elliptic Curve Cryptography 
ECTL 	European Certificate Trust List 
EV 	Electric Vehicle 
FIPS 	Federal Information Processing Standard 
GET 	command HTTP GET 
GN/BTP 	GeoNetworking/Basic Transport Protocol 
GN6 	GeoNetworking-IPv6 
HMAC 	keyed-Hash Message Authentication Code 
HTTP 	Hyper Text Transfer Protocol 
IETF 	Internet Engineering Task Force 
IP 	Internet Protocol 
ITS-AID ITS Application ID 
ITU-T 	International Telecommunication Union - Telecommunication standardization sector 
KDF 	Key Derivation Function 
LTE 	Long Term Evolution (4G) 
MSB 	Most Significant Bit 
MSEC 	Multicast SECurity 
OBD 	On-Board Diagnosis 
PA 	Policy Authority 
PDU 	Protocol Data Unit 
PII 	Personally Identifiable Information 
POP 	Proof Of Possession 
PSID 	Provider Service Identifier 
RCA 	Root Certification Authority 
RFC 	Request For Comment 
SA 	Security Association 
SCH 	Service CHannel 
SLAAC 	StateLess Address Auto Configuration 
SM 	Security Management 
SSP 	Service Specific Permissions 
TCP 	Transmission Control Protocol 
TLM 	Trust List Manager 
TLS 	Transport Layer Security 
URL 	Uniform Resource Locator 
V2I 	Vehicle-to-Infrastructure 
WLAN 	Wireless Local Area Network 
XOR	eXclusive OR function

Separation of duties for enrolment (identification and authentication) and for authorization has been shown in ETSI TS 102 731 [i.23]

3.4 Notation
Requisiti nel documento:
Obbligatori → senza marcatura.
Condizionali → marcati con [CONDITIONAL] e, se rilevante, con il tipo di ITS Station (ITS-S):
[Itss_WithPrivacy] → ITS-S che devono garantire pseudonimia (es. veicoli privati, dispositivi personali).
[Itss_NoPrivacy] → ITS-S che non necessitano di pseudonimia (es. RSU fisse, veicoli speciali).

4. ITS Authority Hierarchy
La gestione di fiducia e privacy richiede distribuzione sicura di relazioni di fiducia (certificati, chiavi PKI).
Architettura di sicurezza definita in ETSI TS 102 940.
Ruoli principali: Enrolment Authority (EA) e Authorization Authority (AA).
Possibile presenza di più Root CA con un unico modello di fiducia.

5. Privacy in ITS
ISO/IEC 15408-2 individua 4 attributi chiave: anonimato, pseudonimia, non-collegabilità, non-osservabilità.
Solo pseudonimia e unlinkability sono adatte a ITS:
Pseudonimia → uso di identificatori temporanei, mai il canonical ID.
Unlinkability → limitazione delle info immutabili per evitare correlazioni.
Privacy in due dimensioni:
Registrazione e autorizzazione → canonical ID noto solo a EA, separazione EA/AA.
Comunicazioni tra ITS-S → protezione tramite certificati pseudonimi.
Se EA e AA coincidono, devono comunque separare dati per evitare re-identificazione.

6. Trust and Privacy Management 6.1 ITS-S Security Lifecycle
Fasi:
Configurazione iniziale (fabbricazione).
Enrolment.
Autorizzazione.
Operazione e manutenzione.
Fine vita.

 6.1.2 Fabbricazione
ITS-S contiene: canonical ID, info EA/AA, certificati fidati, coppia di chiavi, trust anchor.
EA registra: canonical ID, profilo ITS-S (permessi, restrizioni), chiave pubblica.

 6.1.3 Enrolment
Due tipi di certificati:
ETSI TS 102 941 enrolment credentials (specificati qui).
X.509 enrolment credentials (fuori ambito).
Processo: richiesta al EA → rilascio certificato di enrolment.
Profilo certificato conforme a ETSI TS 103 097 e RFC IETF.
Contiene attributi minimi (country, organization, CN), estensioni standard (key usage, policies, CRL/OCSP).

 6.1.4 Authorization
Con enrolment valido, l’ITS-S chiede Authorization Tickets (ATs) all’AA.
Gli AT permettono messaggi firmati senza rivelare il canonical ID.
Revoca passiva: AT a tempo limitato, non rinnovati ai compromessi.

 6.1.5 Manutenzione
Aggiornamento trust lists (CTL, CRL) via CA, RSU o enti di manutenzione.
Supporto a più Root CA gestite da Trust List Manager (TLM).

 6.1.6 Fine vita
Revoca passiva: EA rifiuta nuovi AT → ITS-S fuori servizio.

6.2 Public Key Infrastructure (PKI)
Formato messaggi (SM_PDU): ASN.1 codificato in COER.
Usano strutture di ETSI TS 103 097:
Signed, Encrypted, SignedAndEncrypted, SignedExternalPayload.
Richieste/Risposte (REQUEST/RESPONSE):
Richiesta → criptata con chiave simmetrica AES generata dall’ITS-S, a sua volta protetta con chiave pubblica del destinatario.
Risposta → criptata usando la stessa chiave AES condivisa.

 6.2.1 Richiesta certificato CA (SubCA → RCA)
Chi richiede: un SubCA (EA o AA) richiede un certificato al Root CA (RCA).
Prima applicazione (iniziale):
Il SubCA compila un application form con identità organizzativa e altre info (fuori dallo scope).
Genera due coppie di chiavi ECC:
verificationKey (per firme/verifica)
encryptionKey (per cifratura).
Crea il messaggio CaCertificateRequestMessage, contenente:
publicKeys = {verificationKey, encryptionKey}
requestedSubjectAttributes (dati richiesti per il certificato).
Firma con la private key della verificationKey (prova di possesso).
Invia al RCA su un canale separato da quello dell’application form.
Re-keying (rinnovo):
SubCA genera nuove chiavi ECC.
Richiesta firmata due volte:
inner signature con la nuova private key,
outer signature con la vecchia private key ancora valida.
Se la chiave è scaduta o revocata → si riparte dal processo iniziale.
Risposta RCA: se validata, RCA rilascia il certificato SubCA (in formato ETSI TS 103 097)

 6.2.2 Un ITS-S (stazione veicolare o personale) deve ottenere certificati (EC, AT) dal PKI.
Comunicazioni possibili:
ITS G5 (via Roadside Unit)
WLAN (hotspot pubblico/privato)
Rete cellulare (3G/4G/5G)
EV Charging Station
Porta OBD in officina
Flussi principali:
ITS-S ↔ EA (richiesta enrolment, Ref S3)
ITS-S ↔ AA (richiesta AT, Ref S2)
ITS-S ↔ Roadside ITS-S ↔ EA/AA (via relay, Ref S1)
Protocollo:
Tutti i messaggi sono Security Management PDUs.
Non hanno payload applicativo.
Devono essere gestiti in ambiente software trusted.
Su IP → si usa HTTP/1.1 su TCP/IP, senza TLS aggiuntivo.

 6.2.3 Enrolment Management (ITS-S → EA) EnrolmentRequest:
ITS-S genera una nuova chiave ECC (verificationKey).
Crea una InnerECRequest contenente:
itsId (canonical ID per prima enrolment, HashedId8 dell’EC per rinnovo)
formato certificato (ts103097v131)
verificationKey
requestedSubjectAttributes (senza certIssuePermissions).
Firma la richiesta (prova di possesso) con la nuova private key.
Incapsula in una struttura firmata (EtsiTs103097Data-Signed) e cifrata con la chiave pubblica EA (ECIES).
Invia al EA come EtsiTs103097Data-Encrypted.
EnrolmentResponse (EA → ITS-S):
Cifrata con la stessa chiave AES usata dal richiedente.
Contiene:
requestHash (SHA256 della richiesta)
responseCode (0 = successo → certificato incluso; ≠0 = errore).
Firmata dal EA con la sua private key

 6.2.3.1 Privacy e pseudonimi
Se usata IPv6, l’ITS-S deve supportare pseudonimi temporanei (SLAAC).
Prima di ogni richiesta AT, l’ITS-S deve cambiare identificativo (MAC, IPv6, ecc.) salvo ci siano richieste pendenti.
In caso di GeoNetworking IPv6 (GN6) → supporto obbligatorio a ID change e firma pacchetti per integrità/autenticità.

 6.2.3.2 Sequenze messaggi (ITS-S initialization)
Per abilitare la comunicazione sicura:
ITS-S invia EnrolmentRequest → EA.
EA risponde con EnrolmentResponse + certificato EC.
ITS-S usa l’EC per richiedere AT all’AA.
Una volta ottenuti gli AT, l’ITS-S può scambiare messaggi firmati con altri ITS-S.
Esistono due modalità:
Standard AT provisioning
Butterfly key provisioning (variante alternativa, ma compatibile).

 6.2.3.3 Authorization Management 6.2.3.3.0 Overview
Un ITS-S invia un Authorization Request all’Authorization Authority (AA) per ottenere un Authorization Ticket (AT) da usare nelle comunicazioni. I requisiti di sicurezza:
integrità, autenticità e confidenzialità;
solo ITS-S registrati e autenticati possono ricevere AT;
per veicoli/dispositivi con esigenze di privacy: garantire pseudonimato e unlinkability tra più richieste.

 6.2.3.3.1 Authorization request
L’AuthorizationRequest è cifrato con la chiave pubblica dell’AA e contiene una nuova coppia di chiavi (verificationKey + opzionale encryptionKey).
È incluso un keyTag, ottenuto con HMAC-SHA256, per garantire integrità e non ripudio delle chiavi.
La struttura SharedATRequest include: identificativo EA, keyTag, formato certificato, attributi richiesti.
Il messaggio è racchiuso in più strutture nidificate (Signed e opzionalmente Encrypted).
Due varianti:
AuthorizationRequestMessage (senza POP).
AuthorizationRequestMessageWithPop (con Proof of Possession, consigliata perché assicura che l’ITS-S possieda la chiave privata corrispondente alla verificationKey).
L’AA, alla ricezione, deve:
decifrare il messaggio;
verificare la firma POP se presente;
controllare il valore HMAC;
chiedere conferma all’EA tramite un’AuthorizationValidationRequest;
in caso di esito positivo, rilasciare l’AT, altrimenti inviare risposta negativa.

 6.2.3.3.2 Authorization response
L’AA risponde con un AuthorizationResponse, cifrato con la stessa chiave simmetrica usata dall’ITS-S.
Struttura:
EtsiTs103097Data-Encrypted → contiene un Signed → contiene un EtsiTs102941Data → contiene la risposta.
Campi principali:
requestHash: hash della richiesta originale;
responseCode: esito della richiesta;
se responseCode = 0 → viene rilasciato l’AT (certificato);
se ≠ 0 → nessun certificato.

 6.2.3.4 Authorization Validation protocol 

6.2.3.4.0 Overview
L’AA invia un’AuthorizationValidationRequest all’EA per validare una richiesta di AT ricevuta da un ITS-S.

 6.2.3.4.1 Authorization validation request
La richiesta è cifrata con la chiave pubblica dell’EA.
Include componenti estratti dall’AuthorizationRequest ricevuta dall’ITS-S (sharedAtRequest ed ecSignature).
Struttura annidata:
AuthorizationValidationRequest → racchiuso in EtsiTs102941Data → firmato (Signed) → cifrato (Encrypted).
L’EA, ricevendo, decifra e verifica firma e contenuti.

 6.2.3.4.2 Authorization validation response
L’EA risponde con un AuthorizationValidationResponse, cifrato con la chiave di risposta fornita dall’AA.
Contenuti:
requestHash della richiesta originale;
responseCode (0 positivo, ≠0 negativo);
se positivo: vengono confermati gli attributi del soggetto (eccetto certIssuePermissions);
se negativo: nessun attributo confermato.
La risposta è anch’essa incapsulata in strutture Encrypted + Signed.
Una risposta positiva include anche: subject assurance, start date, end date, che andranno nell’AT rilasciato.

6.2.3.5.0 Introduzione
Alternativa agli schemi di rilascio AT già descritti.
Basato su IEEE 1609.2.1.
Pensato per scenari con molti AT da rilasciare in maniera efficiente.

6.2.3.5.1 Overview
L’ITS-S invia ButterflyAuthorizationRequest (o versione X.509) all’EA.
L’EA risponde con ButterflyAuthorizationResponse, indicando quando gli AT saranno disponibili.
L’EA fa butterfly key expansion e invia più ButterflyCertRequest all’AA.
L’AA genera gli AT e invia ButterflyCertResponse.
Infine l’ITS-S scarica il batch di AT tramite ButterflyAtDownloadRequest → riceve un file ZIP con gli AT.
Requisiti di sicurezza: integrità, autenticità, confidenzialità, pseudonimità verso l’AA, unlinkability degli AT.

6.2.3.5.2 Butterfly Authorization Request
L’ITS-S crea una caterpillar key pair (ECC).
Costruisce un ToBeSignedCertificate con validità, permessi e caterpillar key.
Forma una EeRaCertRequest (secondo IEEE 1609.2.1) con opzioni per l’espansione (originale o unificata).
Incapsula tutto in strutture ETSI TS 103 097: firmato e cifrato con chiave pubblica dell’EA.
Possibili due formati:
ButterflyAuthorizationRequest
X509SignedButterflyAuthorizationRequest (firma con certificato X.509).

6.2.3.5.3 Butterfly Authorization Response
L’EA risponde con ButterflyAuthorizationResponse, firmata con la sua chiave privata.
Contiene:
versione, generationTime
identificativo batch (i-value)
hash della richiesta (requestHash)
tempo dopo il quale l’ITS-S può scaricare il batch (nextDlTime).

6.2.3.5.4 Butterfly Certificate Request (EA → AA)
L’EA esegue la butterfly key expansion (da caterpillar a cocoon key).
Prepara RaAcaCertRequest, con:
parametri generazione
cocoon key
certificato da firmare (ToBeSignedCertificate aggiornato).
Incapsula in ETSI TS 103 097 firmato e cifrato con la chiave pubblica dell’AA.

6.2.3.5.5 Butterfly Certificate Response (AA → EA)
L’AA risponde con ButterflyCertResponse.
Struttura incapsulata in ETSI TS 103 097, cifrata simmetricamente con la chiave usata dall’EA.
Contiene:
versione, generationTime
hash della richiesta
acaResponse con gli AT emessi (cifrati).

6.2.3.5.6 Butterfly AT Download Request (ITS-S → EA)
L’ITS-S chiede di scaricare gli AT generati.
Costruisce EeRaDownloadRequest con:
generationTime
filename = h-i.zip (dove h è hash della richiesta, i è i-value).
Messaggio firmato e cifrato con chiave pubblica dell’EA.
Può essere anche implementato tramite API REST.

6.2.3.5.7 Butterfly AT Download Response (EA → ITS-S)
L’EA raccoglie tutte le risposte ricevute dall’AA (AcaEeCertResponsePrivateSpdu) e crea un file ZIP.
Dentro il file:
AT in formato IEEE 1609.2.1.
file .info con ButterflyAuthorizationResponseMessage.
Ogni AT porta permessi applicativi e identificatori coerenti con lo schema ETSI.

 6.3 Generation, distribution and use of Trust Information Lists 6.3.1 CTL da TLM
TLM (Trust List Manager) approva/revoca Root CA certificate su indicazione del PA.
Genera e pubblica Certificate Trust List (CTL) in formato Full CTL (v. 6.3.4).
Supporta i casi:
aggiunta Root CA
aggiornamento (rinnovo/rimozione) Root CA
revoca Root CA
aggiornamento TLM certificate (post re-keying)
aggiornamento access point CPOC.
Ogni CTL è firmata dal TLM, numerata (ctlSequence 1–255), con scadenza nextUpdate.
Contiene solo:
certificato TLM (+ link cert opzionale)
certificati Root CA (+ link cert opzionali)
access point CPOC.
Ad ogni update: TLM produce anche una Delta CTL.
Full e Delta CTL hanno stesso ctlSequence.
Pubblicazione via CPOC.

6.3.2 CTL da RCA
RCA (Root CA) è root of trust della gerarchia.
Gestisce trust info dei subordinati (EAs, AAs).
Aggiorna CTL per:
aggiungere EA o AA
aggiornare/rinnovare/rimuovere EA/AA
aggiornare access point DC.
Firmata da RCA, numerata (ctlSequence).
Contenuto ammesso:
certificati EA + URL
certificati AA + URL
access point DC.
Non deve contenere certificati Root CA né TLM.
RCA produce anche Delta CTL.
Pubblicazione via Distribution Centre (DC) associato.

6.3.3 CRL da RCA
CRL (Certificate Revocation List) firmata da RCA.
Contiene identificatori (HashedID8) di CA certificate non più validi.
Possibile includere anche RCA root revocato.
Revoca è permanente.
Non contiene certificati RCA di altre root.
CRL aggiornata aggiungendo revocati e rimuovendo scaduti.
Firmata e time-stamped (thisUpdate).
Pubblicazione via DC.

6.3.4 Full CTL e Delta CTL
Tipi di messaggi:
TlmCertificateTrustListMessage (da TLM)
RcaCertificateTrustListMessage (da RCA).
Struttura comune CtlFormat:
version = 1
nextUpdate
isFullCtl (TRUE/FALSE)
ctlSequence (monotono 1–255)
ctlCommands: add (CtlEntry) o delete (CtlDelete).
Full CTL: isFullCtl=TRUE, solo add (lista completa).
Delta CTL: isFullCtl=FALSE, può contenere add e delete. Sempre riferita alla Full CTL precedente.
CtlEntry può essere: rca, ea, aa, dc, tlm.
CtlDelete rimuove entry esistenti (identificate da HashedId8 o URL DC).
Strutture specifiche:
RootCAEntry = Root CA cert (+ opz. link cert)
EaEntry = EA cert + URL (EA→AA, opz. EA→ITS-S)
AaEntry = AA cert (+ opz. URL per ITS-S)
TlmEntry = TLM cert (+ opz. link cert + URL CPOC)
DcEntry = URL DC + lista digest dei cert pubblicati.
Ogni RCA deve avere almeno un DcEntry che lo contiene.

6.3.5 Trasmissione CTL e CRL
Aggiornamento ITS-S può avvenire con vari metodi (6.1.5).
Comunicazioni specificate in annex D/E.
Broadcast ITS-G5:
ITS-S ritrasmette messaggi ricevuti (senza modificarli).
CTL trasmesse come DeltaCtl.
CRL trasmesse come CertificateRevocationListMessage.

6.3.6 Uso di CTL e CRL da ITS-S
ITS-S verifica la firma (TLM o RCA).
Usa CTL per aggiornare i trust anchors (costruzione chain di certificati).
Usa CRL per escludere certificati revocati nei controlli.

6.4 Generation and distribution of TLM / RCA Link Certificates 6.4.1 General
Link certificates servono a mantenere la continuità di trust quando TLM o RCA cambiano certificato (re-keying).
TLM: genera sempre nuovo cert + link cert e li distribuisce via CPOC.
RCA: dopo re-keying può emettere link certificate o rifare enrolment.
Link certificate garantisce autenticità del nuovo trust anchor.

6.4.2.1 TLM Link Certificate
Generato al re-keying del TLM.
Messaggio TlmLinkCertificateMessage, firmato con la chiave privata del vecchio TLM certificate.
Deve avere permessi CTL Service ITS-AID (0x0270).
Contiene hash del nuovo TLM cert e expiryTime = scadenza del vecchio.
Struttura firmata (EtsiTs103097Data-Signed) include: versione, payload, headerInfo (psid=CTL service), signer=HashedId8 del vecchio TLM, firma con chiave privata vecchia.

6.4.2.2 RCA Link Certificate
RCA genera nuovo cert + RCA Link Certificate.
Procedura a doppia firma:
Single Signed: vecchia RCA firma hash del nuovo cert.
Double Signed: nuova RCA firma il messaggio precedente → garantisce passaggio di trust.
Entrambi i cert (vecchio e nuovo) devono avere i permessi per firmare CTL service.
ExpiryTime = scadenza del cert che firma.
Hash calcolato su COER-encoding del nuovo cert (sha256 o sha384).
Messaggi strutturati come EtsiTs102941Data incapsulati in EtsiTs103097Data-Signed.
✅ In sintesi:
TLM gestisce e distribuisce il trust a livello europeo (Root CAs).
RCA gestisce e distribuisce trust per le subordinate (EA, AA).
CTL = lista di trust anchors (Full o Delta).
CRL = lista di CA revocati.
Link certificates = meccanismo per aggiornare i trust anchors senza interrompere la catena di fiducia.

7.0 Introduzione
ETSI TS 102 940 distingue i pattern di comunicazione applicativa:
Broadcast
Multicast
Unicast
Broadcast = solo autenticazione e integrità, no confidenzialità.
Multicast/Unicast = possono essere commercialmente sensibili → richiedono anche cifratura.
Per tutti (tranne broadcast): SA (Security Association) e gestione chiavi possono essere simmetriche o asimmetriche.
Obbligatorio:
cifratura a livello link (link layer encryption)
cambio periodico MAC address per protezione privacy.

7.1 Broadcast Security Associations (SAs)
Applicazioni: CAM, DENM, messaggi infrastrutturali.
Richiedono: autenticazione, autorizzazione, integrità, ma non confidenzialità.
Firma dei messaggi → con Authorization Ticket (AT) (vedi ETSI TS 103 097).
Il ricevente/relay deve:
ricostruire catena di certificati fino al trust anchor (Root CA o CA fidata)
verificare la catena crittograficamente
verificare la firma del messaggio.

7.2 Multicast SAs
Applicazioni: info trasporto pubblico, punti di interesse, servizi di gruppo.
Richiedono: autenticazione, autorizzazione, cifratura → secondo policy di gruppo.
Assunto: multicast su IP.
Accesso al gruppo → con AT + eventuali registrazioni aggiuntive.
Key management:
controllato dal service provider o da security manager
può essere specifico o usare standard (es. IETF MSEC).
Per key establishment:
Il group leader genera una chiave simmetrica k.
Cripta il primo messaggio con AES-CCM usando k.
Cripta k per ogni membro → RecipientInfo (con certRecipInfo o signedDataRecipInfo).
Invia il tutto incapsulato in EtsiTs103097Data-Encrypted.
I membri:
decriptano k
decriptano il messaggio
possono riusare k per altri messaggi (ma con nonce AES-CCM sempre nuovo).
Se c’è già una pre-shared key → si usa con pskRecipInfo.
Variante: EtsiTs103097Data-SignedAndEncrypted se serve anche autenticazione nei messaggi di gruppo.

7.3 Unicast SAs
Applicazioni: controllo accessi, gestione parcheggi, download contenuti multimediali.
Richiedono: autenticazione, autorizzazione, cifratura.
Assunto: unicast su IP.
Accesso al servizio → con AT + eventuale registrazione.
Key management:
può essere specifico o standard.
Soluzioni standard:
IPsec (RFC 4301, 4877, 4306, 4302, 4303)
TLS 1.2 / 1.3 (IETF) per il livello trasporto.
Per casi non-IP:
si segue approccio simile al multicast:
il mittente genera chiave simmetrica k
cripta primo messaggio + k per il destinatario
usa struttura EtsiTs103097Data-Encrypted con RecipientInfo (certRecipInfo o signedDataRecipInfo).
k può essere riusata (con pskRecipInfo), ma nonce AES-CCM deve essere casuale e unico.
Variante: EtsiTs103097Data-SignedAndEncrypted se serve anche autenticazione nel key establishment.

✅ In sintesi:
Broadcast = solo autenticazione/integrità (firma con AT).
Multicast = gruppo con chiave simmetrica distribuita dal leader → cifratura + autenticazione.
Unicast = scambio diretto → può usare IPsec/TLS o schema simile al multicast per stabilire chiave simmetrica.
